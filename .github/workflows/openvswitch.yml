name: Build OpenVSwitch Image

on:
  workflow_dispatch:
  push:
    paths:
      - 'openvswitch/**'

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  NAMESPACE: openstackhelm

jobs:
  build-openvswitch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        distro: [ubuntu_jammy, ubuntu_noble]
        variant: [standard, dpdk]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Set build variables
        id: vars
        run: |
          DISTRO="${{ matrix.distro }}"
          if [ "${{ matrix.variant }}" == "dpdk" ]; then
            DISTRO="${DISTRO}-dpdk"
            DOCKERFILE="Dockerfile.ubuntu-dpdk"
          else
            DOCKERFILE="Dockerfile.ubuntu"
          fi
          
          # Extract distro version (jammy/noble)
          DISTRO_VERSION="${DISTRO#ubuntu_}"
          DISTRO_VERSION="${DISTRO_VERSION%-dpdk}"
          
          IMAGE_TAG="latest-${DISTRO}"
          
          echo "distro=${DISTRO}" >> $GITHUB_OUTPUT
          echo "distro_version=${DISTRO_VERSION}" >> $GITHUB_OUTPUT
          echo "dockerfile=${DOCKERFILE}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push openvswitch
        run: |
          cd openvswitch
          
          IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.NAMESPACE }}/openvswitch:${{ steps.vars.outputs.image_tag }}"
          
          echo "Building openvswitch:${{ steps.vars.outputs.image_tag }}"
          echo "Target: ${IMAGE}"
          echo "Dockerfile: ${{ steps.vars.outputs.dockerfile }}"
          
          docker build \
            -f ${{ steps.vars.outputs.dockerfile }} \
            --network=host \
            --build-arg="FROM=ubuntu:${{ steps.vars.outputs.distro_version }}" \
            -t ${IMAGE} \
            .
          
          docker push ${IMAGE}

      - name: Verify image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.NAMESPACE }}/openvswitch:${{ steps.vars.outputs.image_tag }}"
          echo "Verifying image: ${IMAGE}"
          docker pull ${IMAGE}
          docker inspect ${IMAGE}